package main

import "factory_method/pkg"

var types = []string{pkg.PersonalComputerType, pkg.NotebookType, pkg.ServerType, "monoblock"}

func main() {
	for _, typeName := range types {
		computer := pkg.New(typeName)
		if computer == nil {
			continue
		}
		computer.PrintDetails()
	}
}

/*
Паттерн "фабричный метод" позволяет создавать объекты без указания точных классов создаваемых объектов.
Вместо этого фабричный метод использует полиморфизм для делегирования создания объектов подклассам.

Реализация:
1. Интерфейс Computer определяет методы, которые должны реализовать все конкретные типы компьютеров.
2, Конкретные структуры (Notebook, PersonalComputer, Server) реализуют интерфейс Computer.
3. Фабричный метод New в computer.go выбирает, какой тип компьютера создавать, основываясь на значении аргумента typeName.
4. main.go содержит список типов компьютеров и создает объекты, используя фабричный метод New. Если тип компьютера не существует, метод New выводит сообщение и возвращает nil.

Таким образом, паттерн "Фабричный метод" помогает инкапсулировать создание объектов и позволяет добавлять новые типы компьютеров без изменения
клиентского кода, что делает код более гибким и расширяемым.
*/
